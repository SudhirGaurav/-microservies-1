
#.About "Feign framework"" ?????
	1.Video : 149.
	2.as u can see  in CurrencyConversionController.java[18], for one microservice call ,we need to write 20 lines of code .IN real work  appl, there could be 1000 MS , think once how many line of code is needed for for .
		ThereFore , Spring cloud provided a FW called Feng ,which will handle to call multiple microservices.
	3. This is Spring cloud framework. 
	4.It is used for calling MSs
	5. This can NOT  used for handle load-balancing easily [bellow is reason] 
	6. code bellow is problme .
		@FeignClient(name = "currency-exchange" , url = "localhost:8000")
		 Hardcoded port is biggest issue. this is king of static MS calling.
		 we can not run MSs dinimically bcz url port is hardcoded .
		 
		 So Hardcode port is the problem therefore need to go for Naming server ....
		 
	7.Feign is actually a load banlancer . when we removed hardcoded port it will talk to eureka naming server and it will sereced the registered-up service which is present in eureka  
	8. Ribbon is one more example of load balancer.
	9.(7+8)-Feign uses Ribbon as its load balancer by default. Ribbon dynamically determines which 
			instance of a service to send a request to based on load balancing algorithms. 
			When Feign makes a request to a service, Ribbon intercepts the request and chooses an 
			appropriate instance based on the configured load balancing strategy.
	
#.Naming server or service registery,  Eureka naming serever 
	1. Must read point 6 above[IMP]
	2. Eureka is a naming server or service registry which is provided by spring cloud
	
#Spring cloud API gateway
	#."Spring_cloud_api_gateway" is one kind of gate which is supported by spring cloud 
	1.In real world there will be 10000+ MSs ,for this there will be multiple of same code will be required for all MSs . same code will be for login , authentication, security etc... 
	For this we will use spring cloud API gateway
	2. spring-cloud-starter-gateway is pom dependency for api-gateway
	
#Create docker image .

	1.Use bellow tag under spring-booot build tag of pom.xml
				<configuration>
					<image>
						<name>sudhirgaurav1/dockerimage-${project.artifactId}:${project.version}</name>
						<pullPolicy>IF_NOT_PRESENT</pullPolicy>
					</image>
				</configuration>
				
	2.pom.xml run as -> 
		spring-boot:build-image -DskipTests
	3. One second command is successfull , docker image ll be created inside docker server
#docker-compose.yaml
	1. This need to use to run all MS at a same time.
	2. command to execute yaml file 
		docker-compose up  <-- Need to run this command where .yml file is present 